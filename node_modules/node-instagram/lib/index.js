'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _lodash = require('lodash.isfunction');

var _lodash2 = _interopRequireDefault(_lodash);

var _stream = require('./stream');

var _stream2 = _interopRequireDefault(_stream);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Instagram = function () {
  /**
   * Create a new instance of instagram class
   * @param {Object} options
   * @param {String} options.clientId
   * @param {String} options.accessToken
   */
  function Instagram() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Instagram);

    this.baseApi = 'https://api.instagram.com/v1/';
    this.clientId = options.clientId;
    this.accessToken = options.accessToken;
  }

  /**
   * Send a request
   * @param  {String} type
   * @param  {String} endpoint
   * @param  {Object} options
   * @param  {Function} callback
   * @return {Promise}
   * @private
   */


  _createClass(Instagram, [{
    key: 'request',
    value: function request(type, endpoint) {
      var _rp;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments[3];

      if ((0, _lodash2.default)(options)) {
        callback = options;
        options = {};
      }
      var key = 'qs';
      var accessToken = this.accessToken;
      if (options.accessToken) {
        accessToken = options.accessToken;
        delete options.accessToken; // eslint-disable-line no-param-reassign
      }
      if (type === 'POST') {
        key = 'form';
      }
      return (0, _requestPromise2.default)((_rp = {
        method: type,
        uri: '' + this.baseApi + endpoint
      }, _defineProperty(_rp, key, Object.assign({
        access_token: accessToken
      }, options)), _defineProperty(_rp, 'json', true), _rp)).then(function (data) {
        if ((0, _lodash2.default)(callback)) {
          callback(null, data);
        }
        return data;
      }).catch(function (err) {
        var error = err.error || err;
        if ((0, _lodash2.default)(callback)) {
          return callback(error);
        }
        throw error;
      });
    }

    /**
     * Send a GET request
     * @param  {String} endpoint
     * @param  {Object} [options]
     * @param  {Function} [callback]
     * @return {Promise}
     */

  }, {
    key: 'get',
    value: function get(endpoint, options, callback) {
      return this.request('GET', endpoint, options, callback);
    }

    /**
     * Send a POST request
     * @param  {String} endpoint
     * @param  {Object} [options]
     * @param  {Function} [callback]
     * @return {Promise}
     */

  }, {
    key: 'post',
    value: function post(endpoint, options, callback) {
      return this.request('POST', endpoint, options, callback);
    }

    /**
     * Send a DELETE request
     * @param  {String} endpoint
     * @param  {Object} [options]
     * @param  {Function} [callback]
     * @return {Promise}
     */

  }, {
    key: 'delete',
    value: function _delete(endpoint, options, callback) {
      return this.request('DELETE', endpoint, options, callback);
    }

    /**
     * Create a new instagram stream
     * @param  {String} endpoint
     * @param  {Object} [options]
     * @return {EventEmitter}
     */

  }, {
    key: 'stream',
    value: function stream(endpoint, options) {
      return new _stream2.default(this, endpoint, options);
    }
  }]);

  return Instagram;
}();

exports.default = Instagram;