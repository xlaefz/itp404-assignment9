'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Stream = function (_EventEmitter) {
  _inherits(Stream, _EventEmitter);

  /**
   * Create a new instance of stream class
   * @param {Instagram} instagram
   * @param {String}    endpoint
   * @param {Object}    [options]
   * @param {Boolean}   [options.runOnCreation]
   * @param {Number}    [options.interval]
   * @param {String}    [options.minTagId]
   */
  function Stream(instagram, endpoint) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Stream);

    var _this = _possibleConstructorReturn(this, (Stream.__proto__ || Object.getPrototypeOf(Stream)).call(this));

    _this.instagram = instagram;
    _this.endpoint = endpoint;
    _this.runOnCreation = options.runOnCreation === false ? options.runOnCreation : true;
    _this.interval = options.interval || 10000;
    _this.minTagId = options.minTagId;
    _this.intervalId = null;
    _this.cache = [];
    _this.accessToken = options.accessToken;
    if (_this.runOnCreation) {
      _this.start();
    }
    return _this;
  }

  /**
   * Start the stream
   */


  _createClass(Stream, [{
    key: 'start',
    value: function start() {
      this.startDate = new Date();
      this.makeRequest();
      // Stop the old stream if there is one
      this.stop();
      // Start setInterval and store id
      this.intervalId = setInterval(this.makeRequest.bind(this), this.interval);
    }

    /**
     * Make a request on instagram API
     * Cache the result and emit only new messages
     */

  }, {
    key: 'makeRequest',
    value: function makeRequest() {
      var _this2 = this;

      var params = {
        accessToken: this.accessToken
      };
      if (this.minTagId) {
        params.min_tag_id = this.minTagId;
      }
      this.instagram.get(this.endpoint, params).then(function (data) {
        if (data.data.length > 0) {
          var _cache;

          // Only return messages not in cache
          var newPosts = data.data.filter(function (post) {
            return _this2.cache.indexOf(post.id) === -1;
          });
          (_cache = _this2.cache).push.apply(_cache, _toConsumableArray(newPosts.map(function (post) {
            return post.id;
          })));
          // Only return messages created after the stream
          newPosts = newPosts.filter(function (post) {
            return _this2.startDate < post.created_time * 1000;
          });
          if (data.pagination.min_tag_id) {
            _this2.minTagId = data.pagination.min_tag_id;
            _this2.cache = [];
          }
          if (newPosts.length > 0) {
            _this2.emit('messages', newPosts);
          }
        }
      }).catch(function (err) {
        _this2.emit('error', err.error || err);
      });
    }

    /**
     * Stop the stream
     */

  }, {
    key: 'stop',
    value: function stop() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
      }
    }
  }]);

  return Stream;
}(_events2.default);

exports.default = Stream;